/*global jQuery, $, _, AjaxSolr, EUMSSI*/
(function ($) {

	/**
	 * Widget that manages the Related Filters generated by the Service,
	 * @type {A|*|void}
	 * @augments AjaxSolr.AbstractWidget
	 */
	AjaxSolr.FilterRelatedContentWidget = AjaxSolr.AbstractWidget.extend({

		start:0,	//Reset the pagination with doRequest on this Widget

		init: function(){
			this.$target = $(this.target);

			var template = _.template($("#filter-related-content-tpl").html());
			this.$target.html(template());

			this.$entities = this.$target.find(".entities");
			this.$keywords = this.$target.find(".keywords");
			this.$queries = this.$target.find(".queries");

			//EVENTS
			EUMSSI.EventManager.on("onGetRelatedFilters", this._onGetRelatedFilters.bind(this));
			this.$target.find(".search").button().on("click", this._onSearchClick.bind(this));
		},

		beforeRequest: function(){
			return true;
		},

		afterRequest: function(){
			return true;
		},

		/**
		 * Parse the response and renders the filters related with it
		 * @param response {data, meta}
		 * @private
		 */
		_onGetRelatedFilters : function(event, response){
			this.$entities.empty();
			this.$keywords.empty();
			this.$queries.empty();
			if(response.data.dbpedia){
				this._extractDbpediaItems(response.data.dbpedia);
			}
			if(response.data.kea){
				this._extractKeaItems(response.data.kea);
			}
		},

		/**
		 * Obtain the dbpedia custom filters
		 * @param dbpediaData
		 * @private
		 */
		_extractDbpediaItems: function(dbpediaData){
			var type, queries = [], entities = [];
			_.each(dbpediaData, function(element, key) {
				type = key;
				if(type !== "all") {
					_.each(element, function(element) {
						if(type == "other") {
							if(queries.indexOf(element.text) < 0) {
								queries.push(element.text);
								this._renderQueryRow(element.text);
							}
						} else {
							if(entities.indexOf(element.uri) < 0){
								entities.push(element.uri);
								this.$entities.append(this._renderElementRow({
									text : element.text,
									value: element.uri,
									field: "meta.extracted.text_nerl.dbpedia." + type
								}, "entity"));
							}
						}
					}.bind(this));
				}
			}.bind(this));
		},

		/**
		 * Get the keywords and generate the custem filters
		 * JAVA keyframe : {text, keyphrase, stemmed, rank, probability, begin, end}
		 * @param keaData
		 * @private
		 */
		_extractKeaItems: function(keaData){
			var usedKeywords = [];
			_.each(keaData, function(element) {
				//Avoid duplicates
				if(usedKeywords.indexOf(element.text) < 0) {
					usedKeywords.push(element.text);
					this.$keywords.append(this._renderElementRow({
						text : element.text,
						value: element.text,
						field: "meta.source.keywords"
					}, "keyword"));
				}
			}.bind(this));
		},

		/**
		 *
		 * @param {Object} item - {text, value, field}
		 * @param type
		 * @private
		 */
		_renderElementRow : function(item, type){
			var entityTpl = _.template($("#filter-related-content-row-tpl").html());
			return entityTpl({
				item : item,
				type : type
			});
		},

		_renderQueryRow : function(query){
			var item = $("<a>").html(query);
			item.click(this._addQueryToFilter);
			this.$queries.append(item);
		},

		_onSearchClick : function(){
			//Clean previous filters
			EUMSSI.FilterManager.removeFilterByWidget(this.id, true);

			//Add checked items to filter
			var checkedItems = this.$target.find("input[type='checkbox']:checked");
			checkedItems.each(function(index, el){
				var value = $(el).closest(".item-row").attr("data-value");
				var field = $(el).closest(".item-row").attr("data-field");
				this._addItemToFilter(value, field);
			}.bind(this));

			//Do request
			EUMSSI.Manager.doRequest(0);
			EUMSSI.EventManager.trigger("CloseFilter");
		},

		_addItemToFilter : function(value, field){
			this.storedValue = field + ":" + value;
			var label = field.split(".").pop();
			EUMSSI.FilterManager.addFilter(field, this.storedValue, this.id, label + ": "+value);
		},

		/**
		 * TODO mejorar este comportamiento para que no busque por ID T_T
		 * @param event
		 * @private
		 */
		_addQueryToFilter : function(event){
			$("#generated-GENERAL_SEARCH").find("input").val($(event.target).html()).blur();
		}

	});

})(jQuery);